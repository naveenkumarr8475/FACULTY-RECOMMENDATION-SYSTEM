CREATE DATABASE faculty_recommendation_system;
USE faculty_recommendation_system;

CREATE TABLE DOMAIN
(
  DOMAIN_NAME VARCHAR(30) PRIMARY KEY
);

CREATE TABLE DEPARTMENT
(
    DEPT_ID VARCHAR(5) PRIMARY KEY,
    DEPT_NAME VARCHAR(30) NOT NULL UNIQUE,
    BUILDING VARCHAR(20),
    FLOOR INT,
    HOD_ID VARCHAR(15)
);


CREATE TABLE TEACHER
(
  TEACHER_ID VARCHAR(15) PRIMARY KEY,
  TEACHER_NAME VARCHAR(30) NOT NULL,
  TEACHER_MOBILE_NO VARCHAR(15) NOT NULL,
  TEACHER_EMAIL VARCHAR(30) NOT NULL,
  DEPT_ID VARCHAR(5) NOT NULL,
  YEARS_OF_EXPERTISE INT,
  SCHOOLING VARCHAR(30),
  GRADUATION VARCHAR(30) NOT NULL,
  COMPANY_INSTITUTE TINYTEXT,
  OTHERS TEXT,
  POSITIONS TINYTEXT,
  PASSWORD VARCHAR(15) NOT NULL,
  FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID) ON DELETE CASCADE
);


CREATE TABLE STUDENT
(
  SRN VARCHAR(13) PRIMARY KEY,
  STUDENT_NAME VARCHAR(30) NOT NULL,
  SECTION CHAR(1) NOT NULL,
  DEPT_ID VARCHAR(5) NOT NULL,
  STUDENT_MAIL VARCHAR(30) NOT NULL,
  STUDENT_PHONE VARCHAR(15),
  CGPA FLOAT(4,2) CHECK (CGPA >0.00 AND CGPA<10.00),
  PASSWORD VARCHAR(15) NOT NULL,
  FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID) ON DELETE CASCADE
);

CREATE TABLE PROJECT
(
  PROJECT_ID INT AUTO_INCREMENT PRIMARY KEY,
  PROJECT_TITLE VARCHAR(30) NOT NULL,
  DOMAIN_NAME VARCHAR(30),
  PROBLEM_STATEMENT TEXT,
  TEACHER_ID VARCHAR(15) NOT NULL,
  FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER(TEACHER_ID) ON DELETE CASCADE,
  FOREIGN KEY (DOMAIN_NAME) REFERENCES DOMAIN(DOMAIN_NAME) ON DELETE SET NULL
);

CREATE TABLE PAPER
(
  PAPER_TITLE VARCHAR(30) PRIMARY KEY,
  PUBLICATION_NAME VARCHAR(30) NOT NULL,
  PROJECT_ID INT,
  PUBLISHED_BY VARCHAR(15),
  DATE_OF_PUBLICATION DATE,
  FOREIGN KEY (PUBLISHED_BY) REFERENCES TEACHER(TEACHER_ID) ON DELETE SET NULL,
  FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(PROJECT_ID) ON DELETE SET NULL
);

CREATE TABLE TEAM
(
  TEAM_ID INT AUTO_INCREMENT PRIMARY KEY,
  MAX_NO_OF_MEMBER INT NOT NULL DEFAULT 4,
  STATUS ENUM('CAPSTONE','ACTIVE','NON-ACTIVE'),
  TEAM_HEAD VARCHAR(13) ,
  FOREIGN KEY (TEAM_HEAD) REFERENCES STUDENT(SRN) ON DELETE SET NULL
);

CREATE TABLE HAS_EXPERTISE_IN
(
  TEACHER_ID VARCHAR(15) NOT NULL,
  DOMAIN_NAME VARCHAR(30) NOT NULL,
  PRIMARY KEY (TEACHER_ID, DOMAIN_NAME),
  FOREIGN KEY (TEACHER_ID) REFERENCES TEACHER(TEACHER_ID) ON DELETE CASCADE,
  FOREIGN KEY (DOMAIN_NAME) REFERENCES DOMAIN(DOMAIN_NAME) ON DELETE CASCADE
);

CREATE TABLE INTERESTED_IN
(
  DOMAIN_NAME VARCHAR(30) NOT NULL,
  SRN VARCHAR(13) NOT NULL,
  PRIMARY KEY (DOMAIN_NAME, SRN),
  FOREIGN KEY (DOMAIN_NAME) REFERENCES DOMAIN(DOMAIN_NAME) ON DELETE CASCADE,
  FOREIGN KEY (SRN) REFERENCES STUDENT(SRN) ON DELETE CASCADE
);

CREATE TABLE MEMBER
(
  SRN VARCHAR(13) NOT NULL,
  TEAM_ID INT NOT NULL,
  PRIMARY KEY (SRN, TEAM_ID),
  FOREIGN KEY (SRN) REFERENCES STUDENT(SRN) ON DELETE CASCADE,
  FOREIGN KEY (TEAM_ID) REFERENCES TEAM(TEAM_ID) ON DELETE CASCADE
);

CREATE TABLE TEAM_PROJECT_RELATION
(
  TEAM_ID INT NOT NULL,
  PROJECT_ID INT NOT NULL,
  PRIMARY KEY (TEAM_ID, PROJECT_ID),
  FOREIGN KEY (TEAM_ID) REFERENCES TEAM(TEAM_ID) ON DELETE CASCADE,
  FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(PROJECT_ID) ON DELETE CASCADE
);







DELIMITER //
CREATE TRIGGER check_hod_department
BEFORE UPDATE ON DEPARTMENT
FOR EACH ROW
BEGIN
    IF NEW.HOD_ID IS NOT NULL THEN
        IF NOT EXISTS (
            SELECT 1
            FROM TEACHER
            WHERE TEACHER_ID = NEW.HOD_ID AND DEPT_ID = NEW.DEPT_ID
        ) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'HOD does not belong to the same department';
        END IF;
    END IF;
END //
DELIMITER ;







DELIMITER //
CREATE PROCEDURE CHECK_MAX_MEMBERS_PROC(IN team_id_param INT)
BEGIN
  DECLARE team_member_count INT;
  DECLARE max_members INT;

  SELECT COUNT(*) INTO team_member_count FROM MEMBER WHERE TEAM_ID = team_id_param;

  SELECT MAX_NO_OF_MEMBER INTO max_members FROM TEAM WHERE TEAM_ID = team_id_param;

  IF team_member_count > max_members THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Team has exceeded the maximum number of members';
  END IF;
END //
DELIMITER ;




DELIMITER //
CREATE TRIGGER add_team_head_to_member
AFTER INSERT ON TEAM
FOR EACH ROW
BEGIN
   
    IF NEW.TEAM_HEAD IS NOT NULL THEN
        INSERT INTO MEMBER (SRN, TEAM_ID) VALUES (NEW.TEAM_HEAD, NEW.TEAM_ID);
    END IF;
END;
//
DELIMITER ;





CREATE USER 'ADMIN'@'localhost' IDENTIFIED BY '1726';
GRANT ALL PRIVILEGES ON faculty_recommendation_system.* TO 'ADMIN'@'localhost' WITH GRANT OPTION;
FLUSH PRIVILEGES;

CREATE USER 'STUDENT'@'localhost' IDENTIFIED BY '1726';
GRANT SELECT ON *.* TO 'STUDENT'@'localhost';
GRANT INSERT, UPDATE, DELETE ON faculty_recommendation_system.student TO 'STUDENT'@'localhost';
FLUSH PRIVILEGES;





